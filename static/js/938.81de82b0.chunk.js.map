{"version":3,"file":"static/js/938.81de82b0.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","components/Movies/Movies.jsx","pages/MoviesPage/MoviesPage.jsx","services/movie-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const elements = movies.map(({ id, title }) => (\n    <li key={id}>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        {title}\n      </Link>\n    </li>\n  ));\n\n  return <ul>{elements}</ul>;\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ onSubmit, initialValue }) => {\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setSearch(initialValue);\n  }, [initialValue]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(search);\n  };\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        value={search}\n        onChange={handleChange}\n        name=\"search\"\n        type=\"text\"\n        autoComplete=\"on\"\n        autoFocus\n        placeholder=\"Search movies\"\n        required\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchForm.defaultProps = {\n  initialValue: '',\n};\n\nSearchForm.propTypes = {\n  initialValue: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport SearchForm from 'components/SearchForm';\nimport MoviesList from 'components/MoviesList';\n\nimport { getFoundMovies } from 'services/movie-api';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  // const [query, setQuery] = useState('');\n  const [foundMovies, setFounMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const onFormSubmit = search => {\n    if (search === query) return;\n    setSearchParams({ query: search });\n    // setQuery(search);\n    setFounMovies([]);\n    setError(null);\n  };\n\n  useEffect(() => {\n    if (query) {\n      const fetchFoundMovies = async () => {\n        try {\n          setLoading(true);\n          const { results } = await getFoundMovies(query);\n          setFounMovies([...results]);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchFoundMovies();\n    }\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm onSubmit={onFormSubmit} initialValue={query} />\n      {loading && <p>Loading...</p>}\n      {error && <p>Sorry! {error.message}</p>}\n      {Boolean(foundMovies.length) && <MoviesList movies={foundMovies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import Movies from 'components/Movies';\n\nconst MoviesPage = () => {\n  return <Movies />;\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '3093f90428db537aee0c54ac8ab57737',\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day?');\n  return data;\n};\n\nexport const getFoundMovies = async query => {\n  const { data } = await instance.get('/search/movie?', { params: { query } });\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}?`);\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits?`);\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/reviews?`);\n  return data;\n};\n"],"names":["MoviesList","movies","location","useLocation","elements","map","id","title","to","state","from","defaultProps","SearchForm","onSubmit","initialValue","useState","search","setSearch","useEffect","e","preventDefault","value","onChange","target","name","type","autoComplete","autoFocus","placeholder","required","useSearchParams","searchParams","setSearchParams","query","get","foundMovies","setFounMovies","loading","setLoading","error","setError","fetchFoundMovies","getFoundMovies","results","message","Boolean","length","instance","axios","baseURL","params","api_key","getTrendMovies","data","getMovieDetails","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}